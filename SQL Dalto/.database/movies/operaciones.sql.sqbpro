<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/santi/Programación/SQL Dalto/.database/movies/movie.sqlite" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure pragmas browser query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="6701"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,6:mainActors"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Actors" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="90"/><column index="2" value="85"/><column index="3" value="172"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="IMDB" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="97"/><column index="2" value="300"/><column index="3" value="75"/><column index="4" value="110"/><column index="5" value="105"/><column index="6" value="102"/><column index="7" value="91"/><column index="8" value="100"/><column index="9" value="100"/><column index="10" value="100"/><column index="11" value="100"/><column index="12" value="100"/><column index="13" value="100"/><column index="14" value="100"/><column index="15" value="100"/><column index="16" value="100"/><column index="17" value="100"/><column index="18" value="118"/><column index="19" value="139"/><column index="20" value="113"/><column index="21" value="128"/><column index="22" value="123"/><column index="23" value="122"/><column index="24" value="137"/><column index="25" value="132"/><column index="26" value="122"/><column index="27" value="137"/><column index="28" value="132"/><column index="29" value="112"/><column index="30" value="127"/><column index="31" value="122"/><column index="32" value="122"/><column index="33" value="102"/><column index="34" value="113"/><column index="35" value="82"/><column index="36" value="77"/><column index="37" value="102"/><column index="38" value="117"/><column index="39" value="112"/><column index="40" value="111"/><column index="41" value="126"/><column index="42" value="121"/><column index="43" value="111"/><column index="44" value="126"/><column index="45" value="121"/><column index="46" value="101"/><column index="47" value="116"/><column index="48" value="111"/><column index="49" value="115"/><column index="50" value="111"/><column index="51" value="91"/><column index="52" value="102"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="practical.sql">--- SELECT all the Titles

SELECT Title FROM IMDB;


-- Filtrar por genero

/* Muestra las peliculas del genero comedy*/

SELECT  (SELECT Title FROM IMDB WHERE  generes.Movie_id = Movie_id ) as Comedy_Titles
FROM genre as generes
WHERE genre = &quot;Comedy&quot;;

 
--- Buscar por titulo
/* Encuentra peliclas que contengan la palabra war en su titutlo, puedes usar el operador like para busquedar parciales*/
SELECT Title FROM IMDB
WHERE Title like &quot;%War%&quot;;

-- Top peliculas por recaudacion

/*Ordena las películas de mayor a menor recaudación mundial (worldwide_gross).*/

SELECT Worldwide, (SELECT Title FROM IMDB WHERE money.Movie_id = Movie_id) as revenue
FROM earning as money
ORDER by Worldwide DESC;

-- Promedio de presupuestos
/*Calcula el presupuesto promedio de las películas. Puedes usar la función AVG*/
SELECT round(avg(Budget)) as average_budget FROM IMDB

-- Peliculas mas antigua
/* selecciona las 10 peliculas mas antiguas de la base de datos*/

-- No hay ninguna tabla o campo referente a la fecha



</sql><sql name="SQL 2">-- Ejercicios de SQlite con operaciones --

/* 1. Creación y eliminación de tablas:

Crea una nueva tabla llamada &quot;Actores&quot; con los campos &quot;actor_id&quot; (entero autoincremental), &quot;nombre&quot; (texto) y &quot;fecha_nacimiento&quot; (fecha).
*/


-- CREATE TABLE Actors(
-- 	actor_id INTEGER PRIMARY KEY AUTOINCREMENT,
-- 	nombre TEXT ,
-- 	fecha_nacimiento DATE
-- );



--Elimina la tabla &quot;Actores&quot; si ya existe.
/*DROP TABLE if EXISTS  Actors */

--- Poner datos nuevos
--Inserta tres actores en la tabla &quot;Actores&quot; con sus respectivos nombres y fechas de nacimiento.
-- 
-- INSERT INTO Actors(nombre, fecha_nacimiento)
-- 	VALUES (&quot;Tom Cruise&quot;, &quot;11-4-1904&quot;),
-- 	(&quot;Will Smith&quot;, &quot;2-8, 1970&quot;);



--- Seleccione todos los datos de Actors
SELECT * FROM Actors;

---Selecciona el nombre y la fecha de nacimiento de los actores nacidos antes de 1970.
SELECT nombre, fecha_nacimiento from Actors
WHERE fecha_nacimiento &lt;&quot;1970-01-01&quot;;


---Selecciona el ID y el nombre del actor con el ID 2.
SELECT actor_id, nombre from Actors WHERE actor_id = 2;


---Actualiza la fecha de nacimiento del actor con ID 3 al 15 de enero de 1980.

UPDATE  Actors SET fecha_nacimiento = &quot;1980-01-15&quot; WHERE actor_id = 3;

---Elimina el actor con ID 1 de la tabla &quot;Actores&quot;.
DELETE FROM Actors WHERE actor_id = 3</sql><current_tab id="1"/></tab_sql></sqlb_project>
